'''http://www.runoob.com/python3/python3-os-file-methods.html相关函数    os.listdir(dirname)：列出dirname下的目录和文件    os.path.normpath(path):规范path字符串形式        os.getcwd()：获得当前工作目录    os.curdir:返回当前目录（'.')    os.access() 方法: 法使用当前的uid/gid尝试访问路径        os.chdir(dirname):改变工作目录到dirname    os.chflags() 方法: 设置路径的标记为数字标记。多个标记可以使用 OR 来组合起来, 只支持在 Unix 下使用。        os.chmod() 方法: 用于更改文件或目录的权限。         os.path.isdir(name):判断name是不是一个目录，name不是目录就返回false     os.path.isfile(name):判断name是不是一个文件，不存在name也返回false    os.path.exists(name):判断是否存在文件或目录name    os.path.getsize(name):获得文件大小，如果name是目录返回0        os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）    os.path.join(path,name):连接目录与文件名或目录    os.path.splitext():分离文件名与扩展名    os.path.abspath(name):获得绝对路径    os.path.basename(path):返回文件名    os.path.dirname(path):返回文件路径     '''import osimport stat# os.listdir(dirname)：列出dirname下的目录和文件def study_path(dir, file):    file.write(dir + '\n')    file_num = 0    # 列出目录下所有文件和目录    list = os.listdir(dir)    for line in list:        file_path = os.path.join(dir, line)        # 如果file_path是一个目录， 列出目录下所有文件        if os.path.isdir(file_path):            file.write(' {}\\\n'.format(line))            for li in os.listdir(file_path):                file.write(" {}\n".format(li))                file_num += 1        elif os.path: # 如果file_path是一个文件            file.write(" {}\n".format(li))            file_num += 1    file.write('all the file num is {}'.format(file_num))    pass# os.walk方法# os模块提供的walk方法很强大，能够把给定的目录下的所有目录和文件遍历出来。# 方法：os.walk(path),遍历path，返回一个对象，他的每个部分都是一个三元组,#   ('目录x'，[目录x下的目录list]，目录x下面的文件)def study_walk(dir, file_info, top_down=True):    for root, dirs, files in os.walk(dir, top_down):        for name in files:            file_info.write(os.path.join(root, name) + '\n')        for name in dirs:            file_info.write(" {}\n".format(os.path.join(root, name)))# os.access(): 方法: 法使用当前的uid / gid尝试访问路径# path -- 要用来检测是否有访问权限的路径。# mode -- mode为F_OK，测试存在的路径，或者它可以是包含R_OK, W_OK和X_OK或者R_OK, W_OK和X_OK其中之一或者更多。#   os.F_OK: 作为access()的mode参数，测试path是否存在。#   os.R_OK: 包含在access()的mode参数中 ， 测试path是否可读。#   os.W_OK 包含在access()的mode参数中 ， 测试path是否可写。#    os.X_OK 包含在access()的mode参数中 ，测试path是否可执行。def study_access():    ret = os.access('study_os.py', os.F_OK)    ret = os.access('study_os.py', os.R_OK)    ret = os.access('study_os.py', os.W_OK)    ret = os.access('study_os.py', os.X_OK)    print("F_OK - 返回值 %s" % ret)    print("R_OK - 返回值 %s" % ret)    print("W_OK - 返回值 %s" % ret)    print("X_OK - 返回值 %s" % ret)    pass# os.getcwd()：获得当前工作目录# os.curdir: 返回当前目录（'.')# os.chdir(dirname): 改变工作目录到dirname# 注解： 只是修改工作目录，不修改实际目录def study_chdir():    path = './tmp'    # 获得当前工作目录    retval = os.getcwd()    print("当前工作目录： {}".format(retval))    # 修改当前工作目录    os.chdir(path)    # 查看修改后的当前目录    retval = os.getcwd()    print("修改后： {}".format(retval))    pass# os.chmod() 方法: 用于更改文件或目录的权限。def study_chmod():    os.chmod('./test.txt', stat.S_IXGRP)# os.path.isdir(name): 判断name是不是一个目录，name不是目录就返回false# os.path.isfile(name): 判断name是不是一个文件，不存在name也返回false# os.path.exists(name): 判断是否存在文件或目录name# os.path.getsize(name): 获得文件大小，如果name是目录返回0## os.path.split(name): 分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）# os.path.join(path, name): 连接目录与文件名或目录# os.path.splitext(): 分离文件名与扩展名## os.path.abspath(name): 获得绝对路径# os.path.basename(path): 返回文件名# os.path.dirname(path): 返回文件路径if __name__ == '__main__':    # dir = input('please input the file:')    # test os.path    # with open('list.txt', 'w') as f:    #     study_path(dir, f)    # test os.walk    # with open('list.txt', 'w') as f:    #     study_walk(dir, f)    # test os.access    # study_access()    # test chdir    # study_chdir()    pass